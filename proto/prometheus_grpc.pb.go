// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prometheus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrometheusServiceClient is the client API for PrometheusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusServiceClient interface {
	ConsumeMetrics(ctx context.Context, in *ConsumeMetricsRequest, opts ...grpc.CallOption) (PrometheusService_ConsumeMetricsClient, error)
}

type prometheusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusServiceClient(cc grpc.ClientConnInterface) PrometheusServiceClient {
	return &prometheusServiceClient{cc}
}

func (c *prometheusServiceClient) ConsumeMetrics(ctx context.Context, in *ConsumeMetricsRequest, opts ...grpc.CallOption) (PrometheusService_ConsumeMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrometheusService_ServiceDesc.Streams[0], "/prometheus.PrometheusService/ConsumeMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &prometheusServiceConsumeMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrometheusService_ConsumeMetricsClient interface {
	Recv() (*MetricsResponse, error)
	grpc.ClientStream
}

type prometheusServiceConsumeMetricsClient struct {
	grpc.ClientStream
}

func (x *prometheusServiceConsumeMetricsClient) Recv() (*MetricsResponse, error) {
	m := new(MetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrometheusServiceServer is the server API for PrometheusService service.
// All implementations should embed UnimplementedPrometheusServiceServer
// for forward compatibility
type PrometheusServiceServer interface {
	ConsumeMetrics(*ConsumeMetricsRequest, PrometheusService_ConsumeMetricsServer) error
}

// UnimplementedPrometheusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPrometheusServiceServer struct {
}

func (UnimplementedPrometheusServiceServer) ConsumeMetrics(*ConsumeMetricsRequest, PrometheusService_ConsumeMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMetrics not implemented")
}

// UnsafePrometheusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusServiceServer will
// result in compilation errors.
type UnsafePrometheusServiceServer interface {
	mustEmbedUnimplementedPrometheusServiceServer()
}

func RegisterPrometheusServiceServer(s grpc.ServiceRegistrar, srv PrometheusServiceServer) {
	s.RegisterService(&PrometheusService_ServiceDesc, srv)
}

func _PrometheusService_ConsumeMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrometheusServiceServer).ConsumeMetrics(m, &prometheusServiceConsumeMetricsServer{stream})
}

type PrometheusService_ConsumeMetricsServer interface {
	Send(*MetricsResponse) error
	grpc.ServerStream
}

type prometheusServiceConsumeMetricsServer struct {
	grpc.ServerStream
}

func (x *prometheusServiceConsumeMetricsServer) Send(m *MetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrometheusService_ServiceDesc is the grpc.ServiceDesc for PrometheusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrometheusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prometheus.PrometheusService",
	HandlerType: (*PrometheusServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeMetrics",
			Handler:       _PrometheusService_ConsumeMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prometheus.proto",
}
